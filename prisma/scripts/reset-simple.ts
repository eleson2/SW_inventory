import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function reset() {\n	console.log('üóëÔ∏è  Resetting database...');\n\n	try {\n		// Truncate in dependency order\n		console.log('Truncating tables...');\n\n		await prisma.$executeRaw`TRUNCATE TABLE audit_log CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE lpar_software CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE package_items CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE lpars CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE packages CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE software_versions CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE software CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE customers CASCADE`;\n		await prisma.$executeRaw`TRUNCATE TABLE vendors CASCADE`;\n\n		// Refresh materialized view if it exists\n		try {\n			await prisma.$executeRaw`REFRESH MATERIALIZED VIEW lpar_dashboard`;\n		} catch (error: any) {\n			// View doesn't exist yet, that's OK\n			console.log('   (materialized view not yet created)');\n		}\n\n		console.log('‚úÖ Database reset successfully!');\n		console.log('   All tables have been emptied');\n		console.log('   Schema, views, and functions remain intact');\n	} catch (error: any) {\n		console.error('‚ùå Error resetting database:', error.message);\n		throw error;\n	} finally {\n		await prisma.$disconnect();\n	}\n}\n\nreset();\n