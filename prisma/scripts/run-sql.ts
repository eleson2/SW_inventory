import { PrismaClient } from '@prisma/client';\nimport { readFileSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst prisma = new PrismaClient();\n\nasync function runSqlFile(filename: string) {\n	console.log(`üìÑ Running ${filename}...`);\n\n	try {\n		const sql = readFileSync(join(__dirname, filename), 'utf-8');\n\n		// Execute as a single transaction\n		await prisma.$executeRawUnsafe(sql);\n\n		console.log(`‚úÖ ${filename} executed successfully!`);\n	} catch (error: any) {\n		console.error(`‚ùå Error executing ${filename}:`, error.message);\n		throw error;\n	}\n}\n\nasync function main() {\n	const command = process.argv[2];\n\n	try {\n		switch (command) {\n			case 'reset':\n				await runSqlFile('reset.sql');\n				break;\n\n			case 'test-data':\n				await runSqlFile('test-data.sql');\n				break;\n\n			case 'reset-and-load':\n				await runSqlFile('reset.sql');\n				await runSqlFile('test-data.sql');\n				break;\n\n			default:\n				console.log(`\nUsage:\n  npx tsx prisma/scripts/run-sql.ts <command>\n\nCommands:\n  reset            - Empty all tables (preserves schema/views)\n  test-data        - Load test data (requires empty tables)\n  reset-and-load   - Reset then load test data (full refresh)\n\nExamples:\n  npx tsx prisma/scripts/run-sql.ts reset\n  npx tsx prisma/scripts/run-sql.ts test-data\n  npx tsx prisma/scripts/run-sql.ts reset-and-load\n				`);\n				process.exit(1);\n		}\n	} catch (error) {\n		console.error('Failed to execute SQL script');\n		process.exit(1);\n	} finally {\n		await prisma.$disconnect();\n	}\n}\n\nmain();\n