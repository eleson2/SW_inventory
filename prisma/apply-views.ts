import { PrismaClient } from '@prisma/client';\nimport { readFileSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst prisma = new PrismaClient();\n\nasync function applyViews() {\n	console.log('📊 Applying database views and functions...');\n\n	try {\n		const sql = readFileSync(\n			join(__dirname, 'migrations', 'add_views_and_functions.sql'),\n			'utf-8'\n		);\n\n		// Split by statement and execute\n		const statements = sql\n			.split(/;\s*$/gm)\n			.filter(s => s.trim() && !s.trim().startsWith('--') && !s.trim().startsWith('/*'));\n\n		for (let i = 0; i < statements.length; i++) {\n			const statement = statements[i].trim();\n			if (statement) {\n				try {\n					console.log(`Executing statement ${i + 1}/${statements.length}...`);\n					await prisma.$executeRawUnsafe(statement);\n				} catch (error: any) {\n					console.error(`Error in statement ${i + 1}:`, error.message);\n					console.error('Statement:', statement.substring(0, 200));\n				}\n			}\n		}\n\n		console.log('✅ Views and functions applied successfully!');\n	} catch (error) {\n		console.error('❌ Error applying views:', error);\n		throw error;\n	} finally {\n		await prisma.$disconnect();\n	}\n}\n\napplyViews();\n