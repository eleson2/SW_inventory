import { json } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport { cloneSoftware, clonePackage, cloneLpar, cloneCustomer, cloneVendor, getClonePreview } from '$lib/server/clone-utils';\nimport { z } from 'zod';\n\n// Clone request schema\nconst cloneRequestSchema = z.object({\n	entityType: z.enum(['software', 'package', 'lpar', 'customer', 'vendor']),\n	sourceId: z.string().uuid(),\n	data: z.record(z.string())\n});\n\nexport const POST: RequestHandler = async ({ request }) => {\n	try {\n		const body = await request.json();\n		const { entityType, sourceId, data } = cloneRequestSchema.parse(body);\n\n		let result;\n\n		switch (entityType) {\n			case 'software':\n				if (!data.name) {\n					return json({ error: 'Name is required' }, { status: 400 });\n				}\n				result = await cloneSoftware(sourceId, data.name);\n				break;\n\n			case 'package':\n				if (!data.name || !data.code || !data.version) {\n					return json({ error: 'Name, code, and version are required' }, { status: 400 });\n				}\n				result = await clonePackage(sourceId, data.name, data.code, data.version);\n				break;\n\n			case 'lpar':\n				if (!data.name || !data.code) {\n					return json({ error: 'Name and code are required' }, { status: 400 });\n				}\n				result = await cloneLpar(sourceId, data.name, data.code, data.customer_id);\n				break;\n\n			case 'customer':\n				if (!data.name || !data.code) {\n					return json({ error: 'Name and code are required' }, { status: 400 });\n				}\n				result = await cloneCustomer(sourceId, data.name, data.code);\n				break;\n\n			case 'vendor':\n				if (!data.name || !data.code) {\n					return json({ error: 'Name and code are required' }, { status: 400 });\n				}\n				result = await cloneVendor(sourceId, data.name, data.code);\n				break;\n\n			default:\n				return json({ error: 'Invalid entity type' }, { status: 400 });\n		}\n\n		return json({ success: true, data: result });\n	} catch (error) {\n		console.error('Clone error:', error);\n		return json(\n			{\n				error: error instanceof Error ? error.message : 'Failed to clone entity'\n			},\n			{ status: 500 }\n		);\n	}\n};\n\nexport const GET: RequestHandler = async ({ url }) => {\n	try {\n		const entityType = url.searchParams.get('entityType') as 'software' | 'package' | 'lpar' | 'customer' | 'vendor';\n		const sourceId = url.searchParams.get('sourceId');\n\n		if (!entityType || !sourceId) {\n			return json({ error: 'Entity type and source ID are required' }, { status: 400 });\n		}\n\n		const preview = await getClonePreview(entityType, sourceId);\n\n		return json({ success: true, preview });\n	} catch (error) {\n		console.error('Preview error:', error);\n		return json(\n			{\n				error: error instanceof Error ? error.message : 'Failed to get preview'\n			},\n			{ status: 500 }\n		);\n	}\n};\n