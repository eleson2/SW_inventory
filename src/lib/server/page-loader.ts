/**\n * Generic page loader utilities for list pages\n * Consolidates duplicate pagination and sorting logic\n */\nimport type { SortOptions } from '$types';\nimport { db, getPaginated } from './db';\n\nexport interface PageLoaderOptions<T = any> {\n	/** The Prisma model delegate to query (e.g., db.customer, db.vendor) */\n	model: any;\n	/** Default sort field (defaults to 'name') */\n	defaultSortField?: string;\n	/** Default sort direction (defaults to 'asc') */\n	defaultSortDirection?: 'asc' | 'desc';\n	/** Default page size (defaults to 20) */\n	defaultPageSize?: number;\n	/** Fields to search in (defaults to ['name', 'code']) */\n	searchFields?: string[];\n	/** Relations to include in the query */\n	include?: Record<string, any>;\n	/** Return key for the data (e.g., 'customers', 'vendors') */\n	dataKey: string;\n}\n\n/**\n * Generic page loader for list pages with pagination, sorting, and search\n *\n * @example\n * // In customers/+page.server.ts\n * export const load: PageServerLoad = async ({ url }) => {\n *   return createPageLoader({\n *     model: db.customer,\n *     dataKey: 'customers'\n *   })(url);\n * };\n *\n * @example\n * // With custom options\n * export const load: PageServerLoad = async ({ url }) => {\n *   return createPageLoader({\n *     model: db.lpar,\n *     dataKey: 'lpars',\n *     defaultSortField: 'code',\n *     include: {\n *       customer: true,\n *       currentPackage: true,\n *       softwareInstalled: {\n *         include: { software: true }\n *       }\n *     }\n *   })(url);\n * };\n */\nexport function createPageLoader<T = any>(options: PageLoaderOptions<T>) {\n	const {\n		model,\n		defaultSortField = 'name',\n		defaultSortDirection = 'asc',\n		defaultPageSize = 20,\n		searchFields = ['name', 'code'],\n		include,\n		dataKey\n	} = options;\n\n	return async (url: URL) => {\n		// Parse query parameters\n		const page = parseInt(url.searchParams.get('page') || '1');\n		const pageSize = parseInt(url.searchParams.get('pageSize') || String(defaultPageSize));\n		const sortField = url.searchParams.get('sort') || defaultSortField;\n		const sortDirection = (url.searchParams.get('direction') || defaultSortDirection) as 'asc' | 'desc';\n		const search = url.searchParams.get('search') || '';\n\n		// Build where clause for search\n		const where = search\n			? {\n					OR: searchFields.map(field => ({\n						[field]: { contains: search, mode: 'insensitive' as const }\n					}))\n			  }\n			: {};\n\n		// Get paginated data from database\n		const data = await getPaginated(\n			model,\n			page,\n			pageSize,\n			where,\n			{ [sortField]: sortDirection },\n			include\n		);\n\n		const sort: SortOptions = {\n			field: sortField,\n			direction: sortDirection\n		};\n\n		return {\n			[dataKey]: data,\n			sort\n		};\n	};\n}\n