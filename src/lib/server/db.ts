/**\n * Database connection utility using Prisma Client\n * Implements singleton pattern for development to prevent too many connections\n */\nimport { PrismaClient } from '@prisma/client';\nimport { dev } from '$app/environment';\n\n// PrismaClient is attached to the `globalThis` object in development to prevent\n// exhausting your database connection limit during hot reload in development\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient };\n\nexport const db = globalForPrisma.prisma || new PrismaClient({\n	log: dev ? ['query', 'error', 'warn'] : ['error']\n});\n\nif (dev) globalForPrisma.prisma = db;\n\n// Helper functions for common queries\n\n/**\n * Get paginated results for any model\n */\nexport async function getPaginated<T>(\n	model: any,\n	page: number = 1,\n	pageSize: number = 20,\n	where: any = {},\n	orderBy: any = {},\n	include: any = {}\n) {\n	const skip = (page - 1) * pageSize;\n\n	const [items, total] = await Promise.all([\n		model.findMany({\n			where,\n			skip,\n			take: pageSize,\n			orderBy,\n			include\n		}),\n		model.count({ where })\n	]);\n\n	return {\n		items,\n		total,\n		page,\n		pageSize,\n		totalPages: Math.ceil(total / pageSize)\n	};\n}\n\n/**\n * Soft delete - set active to false instead of deleting\n */\nexport async function softDelete(model: any, id: string) {\n	return model.update({\n		where: { id },\n		data: { active: false, updatedAt: new Date() }\n	});\n}\n\n/**\n * Create audit log entry\n */\nexport async function createAuditLog(\n	entityType: string,\n	entityId: string,\n	action: 'create' | 'update' | 'delete' | 'rollback' | 'version_update',\n	changes: Record<string, any>,\n	userId?: string\n) {\n	return db.audit_log.create({\n		data: {\n			entity_type: entityType,\n			entity_id: entityId,\n			action,\n			changes,\n			user_id: userId,\n			timestamp: new Date()\n		}\n	});\n}\n