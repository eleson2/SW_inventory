/**\n * Utilities for parsing and comparing software versions and PTF levels\n */\nimport type { SoftwareVersion } from '$types';\n\n/**\n * Parse vendor designation into version and PTF level\n * Examples:\n * - "V2R4M0-PTF12345" -> { version: "V2R4M0", ptfLevel: "PTF12345" }\n * - "2.4.0 (PTF 12345)" -> { version: "2.4.0", ptfLevel: "PTF 12345" }\n * - "14.5" -> { version: "14.5", ptfLevel: undefined }\n */\nexport function parseVendorDesignation(designation: string): SoftwareVersion {\n	const patterns = [\n		// Pattern: V2R4M0-PTF12345\n		/^([VvRrMm0-9.]+)[-_]+(PTF[0-9]+)$/i,\n		// Pattern: 2.4.0 (PTF 12345)\n		/^([0-9.]+)\s*\(PTF\s*([0-9]+)\)$/i,\n		// Pattern: V2R4M0 PTF12345\n		/^([VvRrMm0-9.]+)\s+(PTF[0-9]+)$/i,\n		// Pattern: 2.4.0-SP1\n		/^([0-9.]+)[-_]+(SP[0-9]+)$/i,\n	];\n\n	for (const pattern of patterns) {\n		const match = designation.match(pattern);\n		if (match) {\n			return {\n				version: match[1].trim(),\n				ptfLevel: match[2].trim()\n			};\n		}\n	}\n\n	// No PTF level found, return as version only\n	return {\n		version: designation.trim(),\n		ptfLevel: undefined\n	};\n}\n\n/**\n * Compare two version strings\n * Returns: -1 if v1 < v2, 0 if equal, 1 if v1 > v2\n */\nexport function compareVersions(v1: string, v2: string): number {\n	const parts1 = v1.split(/[.VvRrMm]/).filter(p => p).map(p => parseInt(p) || 0);\n	const parts2 = v2.split(/[.VvRrMm]/).filter(p => p).map(p => parseInt(p) || 0);\n\n	const maxLength = Math.max(parts1.length, parts2.length);\n\n	for (let i = 0; i < maxLength; i++) {\n		const p1 = parts1[i] || 0;\n		const p2 = parts2[i] || 0;\n\n		if (p1 < p2) return -1;\n		if (p1 > p2) return 1;\n	}\n\n	return 0;\n}\n\n/**\n * Compare two PTF levels\n * Returns: -1 if p1 < p2, 0 if equal, 1 if p1 > p2\n */\nexport function comparePtfLevels(p1: string | undefined, p2: string | undefined): number {\n	if (!p1 && !p2) return 0;\n	if (!p1) return -1;\n	if (!p2) return 1;\n\n	const num1 = parseInt(p1.replace(/\D/g, ''));\n	const num2 = parseInt(p2.replace(/\D/g, ''));\n\n	if (num1 < num2) return -1;\n	if (num1 > num2) return 1;\n	return 0;\n}\n\n/**\n * Compare two software versions including PTF levels\n * Returns: -1 if sv1 < sv2, 0 if equal, 1 if sv1 > sv2\n */\nexport function compareSoftwareVersions(sv1: SoftwareVersion, sv2: SoftwareVersion): number {\n	const versionCompare = compareVersions(sv1.version, sv2.version);\n	if (versionCompare !== 0) return versionCompare;\n\n	return comparePtfLevels(sv1.ptfLevel, sv2.ptfLevel);\n}\n\n/**\n * Format a software version for display\n */\nexport function formatSoftwareVersion(sv: SoftwareVersion): string {\n	const ptf = (sv as any).ptfLevel || (sv as any).ptf_level;\n	if (ptf) {\n		return `${sv.version} (${ptf})`;\n	}\n	return sv.version;\n}\n\n/**\n * Check if a version is compatible with a package version requirement\n */\nexport function isVersionCompatible(\n	installed: SoftwareVersion,\n	required: SoftwareVersion,\n	strict: boolean = false\n): boolean {\n	const comparison = compareSoftwareVersions(installed, required);\n\n	if (strict) {\n		// Strict mode: must match exactly\n		return comparison === 0;\n	} else {\n		// Lenient mode: installed must be >= required\n		return comparison >= 0;\n	}\n}\n