/**\n * Reusable clone handler utility for entity detail pages\n * Consolidates duplicate clone logic across all detail pages\n */\n\nexport type EntityType = 'software' | 'package' | 'lpar' | 'customer' | 'vendor';\n\nexport interface CloneHandlerOptions {\n	entityType: EntityType;\n	sourceId: string;\n	redirectPath: (id: string) => string;\n	errorMessage?: string;\n}\n\n/**\n * Creates a reusable clone handler function\n *\n * @example\n * const handleClone = createCloneHandler({\n *   entityType: 'customer',\n *   sourceId: customer.id,\n *   redirectPath: (id) => `/customers/${id}`\n * });\n *\n * // Use with CloneDialog\n * await handleClone(formData);\n */\nexport function createCloneHandler(options: CloneHandlerOptions) {\n	const { entityType, sourceId, redirectPath, errorMessage } = options;\n\n	return async (formData: Record<string, string>) => {\n		try {\n			const response = await fetch('/api/clone', {\n				method: 'POST',\n				headers: { 'Content-Type': 'application/json' },\n				body: JSON.stringify({\n					entityType,\n					sourceId,\n					data: formData\n				})\n			});\n\n			const result = await response.json();\n\n			if (result.success) {\n				window.location.href = redirectPath(result.data.id);\n			} else {\n				alert(`Error: ${result.error}`);\n				throw new Error(result.error);\n			}\n		} catch (error) {\n			console.error('Clone error:', error);\n			const message = errorMessage || `Failed to clone ${entityType}`;\n			alert(message);\n			throw error;\n		}\n	};\n}\n\n/**\n * Hook for managing clone dialog state and handler\n * Returns everything needed for clone functionality\n *\n * @example\n * const clone = useCloneHandler({\n *   entityType: 'customer',\n *   sourceId: customer.id,\n *   redirectPath: (id) => `/customers/${id}`\n * });\n *\n * // In your component:\n * <Button onclick={() => clone.open()}>Clone</Button>\n * <CloneDialog bind:open={clone.isOpen} onClone={clone.handleClone} loading={clone.isLoading} />\n */\nexport function useCloneHandler(options: CloneHandlerOptions) {\n	let isOpen = $state(false);\n	let isLoading = $state(false);\n\n	const handler = createCloneHandler(options);\n\n	const handleClone = async (formData: Record<string, string>) => {\n		isLoading = true;\n		try {\n			await handler(formData);\n		} finally {\n			isLoading = false;\n			isOpen = false;\n		}\n	};\n\n	return {\n		isOpen: $derived(isOpen),\n		isLoading: $derived(isLoading),\n		open: () => { isOpen = true; },\n		close: () => { isOpen = false; },\n		handleClone\n	};\n}\n